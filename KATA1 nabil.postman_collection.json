{
	"info": {
		"_postman_id": "0ef9c45a-b8e6-4007-a625-4524c836b77c",
		"name": "KATA1 nabil",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Repos Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//GET RESPONSE\r",
							"let Repos = pm.response.json();\r",
							"//CHEK STATUS CODE RESPONSE\r",
							"pm.test(\"status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"pm.test(\"Check name\", function(){\r",
							"    pm.expect(Repos.name).to.equal(pm.variables.get(\"name\"));\r",
							"})\r",
							"pm.test(\"Check description\", function(){\r",
							"    pm.expect(Repos.description).to.equal(pm.variables.get(\"description\"));\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"name\",pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"pm.variables.set(\"description\",'Mon Repo cr√©er dans GitHub')\r",
							"//pm.iterationData.get(\"name\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{description}}\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLGITHUB}}/user/repos",
					"host": [
						"{{URLGITHUB}}"
					],
					"path": [
						"user",
						"repos"
					],
					"query": [
						{
							"key": "name",
							"value": "Nabiladj",
							"description": "Nabiladj",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update repos Patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//GET RESPONSE\r",
							"let Repos = pm.response.json();\r",
							"//CHEK STATUS CODE RESPONSE\r",
							"pm.test(\"status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"//CHEK the newNme\r",
							"pm.test(\"Check newName\", function(){\r",
							"    pm.expect(Repos.name).equal(pm.variables.get(\"newName\"));\r",
							"    pm.expect(Repos.name).not.equal(pm.variables.get('name'))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"newName\",pm.variables.replaceIn('{{$randomFileName}}'));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{newName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLGITHUB}}/repos/Nabiladj/{{name}}",
					"host": [
						"{{URLGITHUB}}"
					],
					"path": [
						"repos",
						"Nabiladj",
						"{{name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE REPOS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check status code\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).equal(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLGITHUB}}/repos/Nabiladj/{{newName}}",
					"host": [
						"{{URLGITHUB}}"
					],
					"path": [
						"repos",
						"Nabiladj",
						"{{newName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GETREPOS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check status code\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).equal(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLGITHUB}}/user/repos/{{newName}}",
					"host": [
						"{{URLGITHUB}}"
					],
					"path": [
						"user",
						"repos",
						"{{newName}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "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",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GITHUBURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "pm.variables.replaceIn('{{$randomFirstName}}')"
		},
		{
			"key": "newName",
			"value": ""
		}
	]
}